{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "acrReference": {
      "type": "object",
      "defaultValue": {
        "name": "pontifex",
        "resourceGroup": "containers",
        "subscriptionId": "[subscription().subscriptionId]"
      },
      "metadata": {
        "description": "The container registry for the cluster's managed identity to have AcrPull role assigned"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    }
  },
  "variables": {
    "regionMapping": {
      "australiaeast": "AusE",
      "australiasoutheast": "AusSE"
    },
    "commonTags": "[resourceGroup().tags]",
    "environment": "[variables('commonTags')['Environment']]",
    "aksName": "[conventions.resourceName('akscanary', variables('environment'), variables('regionMapping')[parameters('location')])]",
    "acrPullRoleDefinitionid": "7f951dda-4ed3-4680-a7ca-43fe172d538d",
    "aksResourceId": "[resourceId(subscription().subscriptionId, resourceGroup().name, 'Microsoft.ContainerService/managedClusters', variables('aksName'))]"
  },
  "resources": [
    {
      "name": "[variables('aksName')]",
      "type": "Microsoft.ContainerService/managedClusters",
      "apiVersion": "2020-02-01",
      "location": "[parameters('location')]",
      "tags": "[variables('commonTags')]",
      "properties": {
        "kubernetesVersion": "1.16.7",
        "dnsPrefix": "[concat(variables('aksName'), '-dns')]",
        "enableRBAC": true,
        "networkProfile": {
          "networkPlugin": "azure"
        },
        "addonProfiles": {
          "kubeDashboard": {
            "enabled": false
          }
        },
        "agentPoolProfiles": [
          {
            "count": 2,
            "vmSize": "Standard_B2s",
            "osType": "Linux",
            "type": "VirtualMachineScaleSets",
            "scaleSetPriority": "Regular",
            "tags": "[variables('commonTags')]",
            "name": "linux1",
            "orchestratorVersion": "1.16.7"
          }
        ]
      },
      "identity": {
        "type": "SystemAssigned"
      }
    },
    {
      "comments": "Assign the role of AcrPull to the AKS managed identity",
      "condition": "[greater(length(parameters('acrReference').name), 0)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "AksAcrPullRoleAssignment",
      "resourceGroup": "[parameters('acrReference').resourceGroup]",
      "subscriptionId": "[parameters('acrReference').subscriptionId]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
            {
              "type": "Microsoft.ContainerRegistry/registries/providers/roleAssignments",
              "apiVersion": "2019-04-01-preview",
              "name": "[concat(parameters('acrReference').name, '/Microsoft.Authorization/', guid(variables('aksResourceId')))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId(parameters('acrReference').subscriptionId, 'Microsoft.Authorization/roleDefinitions', variables('AcrPullRoleDefinitionid'))]",
                "principalId": "[reference(variables('aksResourceId'), '2020-02-01').identityProfile.kubeletidentity.objectId]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[variables('aksResourceId')]"
      ]
    }
  ],
  "outputs": {
    "aks": {
      "type": "object",
      "value": "[reference(variables('aksResourceId'), '2020-02-01', 'Full')]"
    }
  },
  "functions": [
    {
      "namespace": "conventions",
      "members": {
        "resourceName": {
          "parameters": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "environment",
              "type": "string"
            },
            {
              "name": "region",
              "type": "string"
            }
          ],
          "output": {
            "type": "string",
            "value": "[concat(parameters('name'), '-', parameters('environment'), '-', parameters('region'), '-', uniqueString(resourceGroup().id))]"
          }
        }
      }
    }
  ]
}
